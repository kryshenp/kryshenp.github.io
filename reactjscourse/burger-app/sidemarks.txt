brand new project created with create-react-app

to enable css modules
to be sure that css classes I create in a css file can be scoped to a specific
component in the app so that they are not applied globally when I accidentally
reuse the same css class

for that I need eject the project by 'yarn eject', so I have an access to the config
in the config folder and there to 2 webpack configuration files.

In part where I have CSS test and the css-loader, there i have to add `modules: true,`
to the options of that loader and add `localIdentName: '[name]__[local]__[hash:base64:5]'
option to basically define the css class name it will automatically generate and
assign. This should take the original name then the local name of the component and
then a randomly generated hash. This will generate this unique css classnames, which
are then assign automatically once we import them through that object from the css
file

Then I copy these 2 lines with `modules` and `localIdentName` and copy them to the
config file of the production build.

With that I have my project setup and can get started.

----------------------------

Do some cleanup work:
remove logo svg file which was created automatically and I don't need
and remove its import in the App.js file, and cleanup the appjs content here.
remove the className APP from the root div and remove the App.css import
and remove the app.css file

in index.css I want to use Open Sans font family, choose it form google fonts, customize
it and with the embed link add it to the public/index.html file and add it right above
the title

I created 2 folders components and containers in my src.
Containers are basically stateful components, so typically components created with
the class keyword, whereas components are stateless components - typically fucntional
components

Now I will create a layout in the components folder, cause now I don't need to manange any
state there
So in components I create a subfolder which I name layout and there create Layout.js

Then assets folder where we'll add a logo. For redux store I'll add the folder later.

In Layout.js I create a component with the Toolbar, SideDrawer and Backdrop
then create <main> in which I wrap the component we made in Layout so I'll use
{props.children}. Don't forget to add props as an argument to the function.

then i'll go with the higher order component(hoc) approach and create such utility auxiliary
component. For that I create a new folder `hoc`  in a src folder and there I create Aux.js file

Auxiliary component is a functional stateless component

then i can wrap everything in Layout.js with the <Aux></Aux>. Export the Layout
component.

Now we can use it in the App.js file in our root component. Import Layout.js to the
App.js. Let's wrap a <p> Test with <Layout>.

Then add "Open-Sans" font into index.css. We did add the import to the public folder,
so just simply add the "Open-Sans" font family as a main font to the index.css file.

With that I got a roof of my app finished for now.

P.S. I had a problem with the absence of the `babel-loader` module. I've solved it
by updating node version from `v8.9.4` to `v9.10.0` and rebuild the app ->
`yarn && yarn. start`.

----------------------------

Start implementing the burger builder component. This will be a container, because
there I plan of managing the state for the burger.
In the containers folder where I create a new subfolder BurgerBulder and BurgerBulder.js
file and there I create the component with the class keyword, cause I want to manage state
there. I name it BurgerBulder and I need to extend this Component object we can
import from React, I also import React to be able to write jsx.

I need to implement the lifecycle `render` method. This is a must because I must
tell react what I want to render. There I need to some jsx code.

For now I want to render 2 different things (wrapped into <Aux>). For that I can
use my Auxiliary component. Import it. Here I want to return 2 jsoned components
in the end. For now I use <div>s as a placeholders. I want to return a burger I
built - a graphical representation of the burger with all the ingredients, and
below that I want to have my build controls - so basically the area where I
can add or remove the ingredients. This is a basic setup of it.

Now I import BurgerBulder in my App.js file and replace Test with it. BurgerBuilder
can be a self-closing component, I don't need to wrap any content with the
selectors.

Improve some styling. Make some margin between my Toolbar placeholder and other part.
I'll do this in the Layout component because there I have the area for the
Toolbar and the area for the main part. So I simply want to add a css class to
the <main> element there to make sure that it has some margin.
For that I'll add a new css file Layout.css and in that file I'll create a new
class .Content where I add margin-top 16px. Then I import classes from the
Layout.css file to the component. Add className to the <main> element.
className={classes.Content}.

In the next step I add the Burger components and burger ingredients which should
be rendered there.

----------------------------
