----------------------------
113. Setting up the Project

brand new project created with create-react-app

to enable css modules
to be sure that css classes I create in a css file can be scoped to a specific
component in the app so that they are not applied globally when I accidentally
reuse the same css class

for that I need eject the project by 'yarn eject', so I have an access to the config
in the config folder and there to 2 webpack configuration files.

In part where I have CSS test and the css-loader, there i have to add `modules: true,`
to the options of that loader and add `localIdentName: '[name]__[local]__[hash:base64:5]'
option to basically define the css class name it will automatically generate and
assign. This should take the original name then the local name of the component and
then a randomly generated hash. This will generate this unique css classnames, which
are then assign automatically once we import them through that object from the css
file

Then I copy these 2 lines with `modules` and `localIdentName` and copy them to the
config file of the production build.

With that I have my project setup and can get started.

----------------------------
114. Creating a Layout Component

Do some cleanup work:
remove logo svg file which was created automatically and I don't need
and remove its import in the App.js file, and cleanup the appjs content here.
remove the className APP from the root div and remove the App.css import
and remove the app.css file

in index.css I want to use Open Sans font family, choose it form google fonts, customize
it and with the embed link add it to the public/index.html file and add it right above
the title

I created 2 folders components and containers in my src.
Containers are basically stateful components, so typically components created with
the class keyword, whereas components are stateless components - typically fucntional
components

Now I will create a layout in the components folder, cause now I don't need to manange any
state there
So in components I create a subfolder which I name layout and there create Layout.js

Then assets folder where we'll add a logo. For redux store I'll add the folder later.

In Layout.js I create a component with the Toolbar, SideDrawer and Backdrop
then create <main> in which I wrap the component we made in Layout so I'll use
{props.children}. Don't forget to add props as an argument to the function.

then i'll go with the higher order component(hoc) approach and create such utility auxiliary
component. For that I create a new folder `hoc`  in a src folder and there I create Aux.js file

Auxiliary component is a functional stateless component

then i can wrap everything in Layout.js with the <Aux></Aux>. Export the Layout
component.

Now we can use it in the App.js file in our root component. Import Layout.js to the
App.js. Let's wrap a <p> Test with <Layout>.

Then add "Open-Sans" font into index.css. We did add the import to the public folder,
so just simply add the "Open-Sans" font family as a main font to the index.css file.

With that I got a roof of my app finished for now.

P.S. I had a problem with the absence of the `babel-loader` module. I've solved it
by updating node version from `v8.9.4` to `v9.10.0` and rebuild the app ->
`yarn && yarn. start`.

----------------------------
115. Starting Implementation of The Burger Builder Container

Start implementing the burger builder component. This will be a container, because
there I plan of managing the state for the burger.
In the containers folder where I create a new subfolder BurgerBulder and BurgerBulder.js
file and there I create the component with the class keyword, cause I want to manage state
there. I name it BurgerBulder and I need to extend this Component object we can
import from React, I also import React to be able to write jsx.

I need to implement the lifecycle `render` method. This is a must because I must
tell react what I want to render. There I need to some jsx code.

For now I want to render 2 different things (wrapped into <Aux>). For that I can
use my Auxiliary component. Import it. Here I want to return 2 jsoned components
in the end. For now I use <div>s as a placeholders. I want to return a burger I
built - a graphical representation of the burger with all the ingredients, and
below that I want to have my build controls - so basically the area where I
can add or remove the ingredients. This is a basic setup of it.

Now I import BurgerBulder in my App.js file and replace Test with it. BurgerBuilder
can be a self-closing component, I don't need to wrap any content with the
selectors.

Improve some styling. Make some margin between my Toolbar placeholder and other part.
I'll do this in the Layout component because there I have the area for the
Toolbar and the area for the main part. So I simply want to add a css class to
the <main> element there to make sure that it has some margin.
For that I'll add a new css file Layout.css and in that file I'll create a new
class .Content where I add margin-top 16px. Then I import classes from the
Layout.css file to the component. Add className to the <main> element.
className={classes.Content}.

In the next step I add the Burger components and burger ingredients which should
be rendered there.

----------------------------
116. Adding a Dynamic Ingredient Component

In components folder I create a new subfolder `Burger`, where Burger related
things go. Add there a couple of subcomponents, i.e. Burger.js file which should
be a burger we rendering to the screen. For ingredients I create another subfolder
inside of the Burger folder BurgerIngredient/BurgerIngredient.js.

In BurgerIngredient.css there is a code for burger ingredients styles.
Now I fill the BurgerIngredient component with life. Create a finction -
so a stateless component burgerIngredient with some props and return smth. Use
{} cause I want to run some logic before I return jsx (don't forget to import
react cause I want to write some jsx in the end) and of course export this as
default.

I need some logic to render the jsx code. This logic is required cause there are
different types of ingredients and I expect to get the info about which ingr to
render via props.

in burgerIngredient I'll create an ingredient variable and set it to null.
Initially I won't render anything, i.e. if smth invalid is passed in.

Now I'll switch (normal JS switch statement) and analyse to type of my ingredient.
So type is a property I expect to receive. Now I have a couple of different CASE_SENSITIVE
for example a `bread-bottom`. MY ingredient there should be <div> with the
className. For that I need to import my classes from the BurgerIngredient.css file
and assign {classes.BreadBottom} for the ingredient <div>;. then break;
After the break I want to add another case `bread-top`. On this ingredient there
will be some seeds, so here I actually return some multiline. Inside of the .BreadTop
<div> i need 2 other <div>s, which represent the seeds with .Seeds1 and .Seeds2.

 then break again. the next cases are `meat`,`cheese`,`bacon`,`salad`.
 then setup a default case there in case smth incorrect is passed there ->
 ingredient should = null;

after this big switch statement here we can safely the ingredient here.
In the next steps I'll add the propType validation here, cause I want to make
sure that I do receive a type property.

----------------------------
118. Adding Prop Type Validation

Now I can add props type validation. For this I cancel the dev server and then
run `yarn add prop-types`. This package is provided by React team to validate
the prop types of my react properties. Then import PropTypes to the BurgerIngredient
file. Then restart the dev server. I can use PropTypes on components which
are created with the class keyword. In BurgerIngredient I have a stateless component
created as a function. I can simply convert it and this doesn't automatically
turn it into container. It's still dumb stateless component without any
state which now is created with the class keyword. This is an important
thing to understand: I DON'T decide if something is a container or not
with the CLASS keyword, I can create all my components as a CLASS if I
want, it's just a good practice to use FUNCTIONAL form as often as possible.
But it's NOT a must.
With that i renamed const burgerIngredient to class BurgerIngredient, to have
a capital 'B' to follow the naming convention of classes. Also import Component
as a named import from 'react'. So now BurgerIngredient should EXTEND Component:
`class BurgerIngredient extends Component`.
Then I add the class {body} where I need to implement the RENDER method.
Inside render () {} I execute my logic - my switch statement and in the end
return the ingredient. Remove the relict down under the render (), and export
my new BurgerIngredient. props.type won't work because because in class
I need props with this.props.type <- add THIS in front of props.

Now I can add a propType validation by adding a className.propTypes property
with the lowercase 'p' and setting it equal to the JavaScript object. In
my case it'd be BurgerIngredient.propTypes = {}; In this object I want to
configure the type property using the PropTypes I imported from that package.
The type should be a string and I also chain another condition, that it is
required `type: PropTypes.string.isRequired`.So if I ever try to use the
ingredient component without passing a type, i'll get an error. BurgerIngredient
component is basically finished and I want to see it in action, so now I
start to build my burger in the Burger component.

----------------------------
119. Starting the Burger Component

Burger component has been created in the functional form again as a
function named 'burger', which receive some props with curly braces {},
so I can add some JS logic before returning jsx.
For now all I do there is return some jsx though, but I'll revisit this
component to enhance it and conditionally render smth else later.
Because I use jsx I have to import react, and export the default burger.
The jsx in return should simply use the burger ingredients components I
created, but I also want to wrap everything in a <div>, cause it'll be a
wrapper which this burger component essentially is - wrapper around all the
ingredients. I give it some styling to define width and height of the burger.
For that I add a new file Burger.css and there I add the .Burger css class
with some rules for the .Burger wrapper and some @media rules. Import css to
the Burger wrapper component. Then import BurgerIngredient and then use it
as a self-closing component, but I have to define a type.
The type has be a string, cause we implemented propType checking.
For now I'll create a burger of 4 ingredients - bread top, cheese, meat
and bread-bottom. Self-closing components look like this:
<BurgerIngredient type="cheese"/>. As we exported the burger, I can go
to the BurgerBuilder container at `containers/BurgerBuilder/BurgerBuilder.js`
and there replace the dummy <div>Burger</div> with our burger.
First I have to import Burger from components/Burger/Burger and replace
that <div> with the self-closing <Burger /> component.

Not great is that everything about the burger is in the end hardcoded. I'm
using components, but I'm not able to change this burger dynamically and I'm
not even rendering it dynamically. Next work will be with managing the state
and rendering burger dynamically.

----------------------------
120. Outputting Burger Ingredients Dynamically
First important step is handling burger ingredients in the state of our burger
Builder, cause this is where we ultimately edit them to. This is also a reason
why this is a stateful component.
I initialise state as a property. There is also a possibility to add a constructor,
where I receive the props call super with the props and then initialise this.state
'this', cause I'm inside method
constructor(props) {
  super(props);
  this.state = {...}
}
this will also work, this is an alternative. This will be commented out, cause
a bit modern approach with shorter syntax will be used.
Inside a state it will be ingredients object. I'll have KEY-VALUE pairs, where
the keys are the names of the ingredients and the values is the amount. Later I'll
add the more state like a price, but for now let's go with the burger fundamentals.
As I have my ingredients, the goal now is to pass this array to my burger. On the
<Burger /> at the ingredients property I pass {this.state.ingredients}. The thing
is - the burger doesn't receive any ingredients :( yet.
I copy that over to the burger component and want to start outputing the ingredients
dynamically. In the Burger.js component we receiving ingredients as a props, but if
I inspect ingredients in a state of the BurgerBuilder - it's an Object, it's
NOT an array, so I can't use map on that, I can't just loop through that - it's an Object.
Instead I have to transform this Object into an Array. To be precise I have to convert
this Object into an Array of values of the ingredients.
In the burger function in the Burger.js component I'll create a new const, which i name
'transformedIngredients' and there I'll use the Object object. That's default
JavaScript object not provided by React. It has a keys method, which extracts the
keys of a given Object and turns that into an Array - gives me an array of the keys.
const transformedIngredients = Object.keys(props.ingredients); For my objects it gives us an array, which contains
a string salad, string bacon etc. The values 1 1 2 2 are not part of the array.
Into Object.keys I'll pass (props.ingredients), now I have that array of keys in the end.

I'll chain a method with the .map method in a new line to be easier to read, which
i can execute since keys returns me an array.
.map() executes a function on an each element in an array. I'll give it
an argument I receive in the array 'igKey' for ingredient key, cause that is
what just part of the array is. In that function here I want to transform this
string value into an array with as many elements as I have in the ingredients for
a given ingredient.
So if I have 2 cheese ingredients in the state at BurgerBulder, then I want to
transform the cheese stirng into an arry which simply contains 2 elements. I don't
care which elements,  if this are 2 As two 1s or whatever, but it should have a
length of 2, so in my Object.keys()map(igKey => {...}), I'll return an array and
use the SPREAD operator,  to spread a new array I have to construct, and I'll construct
it with the [...Array()] method provided by JavaScript. The length of this array
should be the amount of the given ingredients. So props.ingredients[igKey]. I'm
accesing the given [igKey] key from up because I'm stil l in that function of my
.map() method, which runs on an array, which contains all our keys. In this point of
time I have an array with 2 elements. The values don't matter to me.
I'll execute .map() on that array (I'm still inide my outer .map() method). I don't
care about an element itself, so I use underscore '_' as an argument name, to indicate,
that it's a blank, but the INDEX of the element is important to me.
So inside the inner .map() method I  return my <BurgerIngredient>, cause I need to return
JSX in the end, where I'll set the key key={igKey + i}. igKey is smth like a salad and
i is 1,2,3, and so on, so {igKey + i} creates a unique key for rach ingredient.
 And the type simply as igKey type={igKey}. This is why I don't care about the first
 argument, where i put '_', .map((_, i). I'm only interested in the type, which
 I got right from the start since i extract all the types, all the property
 names of my ingredients state here Object.keys( props.ingredients ). That's
 also implies that the keys I used in the BurgerBulder state have to equal the
 keys I check for in the BurgerIngredient: meat, cheese and so on, they have
 to have the same case in and  the same name. This is what I return in the internal
 .map() method and therefore I map my object into an array of ingredients in the
 end. It's just a way to transform an Object of key-value pairs into an Array
 of Burger Ingredients, where the value of that object is important to decide how many
ingredients I need, and the key is important for which type of ingredient I need.
Since I have my transformedIngredients, it's time to return them. I'll always
have bread top and bread bottom, but in between I output {transformedIngredients}.
Now I have a generic web method of outputting. Next I'll wor on allowing user to
add and remove the ingredients.

----------------------------
121. Calculating the Ingredient Sum Dynamically
A list of ingredients starts as an Object which I then transform into an Array.
Now I set all ingredients to 0 in the Burger.js state and have an empty burger.
Instead of an empty burger I'd like to show some message like "Please add some
ingredients!".
transformedIngredients is always going to be an Array, just an array of empty
arrays in the end. How to find out if I got ingredients or not?
I can reduce the transformed ingredients array. For now I console.log(transformedIngredients),
to have an idea how it looks like. Checking the length doesn't do the trick,
cause length is 4 empty inner arrays.
I can flaten this array to make sure, that I pull out the values of inner arrays
and create 1 array only, which contains all these values.
I can do that by adding .reduce() to my transformedIngredients logic. .reduce()
is a built in array function which allows us to transform an array into something
else. It takes a function as input and this function recieves 2 arguments passed
in automatically by JavaScript. The previous value (arr) and the current value(el).
The .reduce() method doesn't only accept the callback here, which is executed on
every element in this array I return from the .map(), it also accepts an initial
value - let's say an empty array - so the initial value of the reduced value.
Of course I want to adjust this reduced value by returning something. And it will
then loop through all the elements and simply add them to the initial value step by step.
In .reduce() I want to return the updated value starting with the initial one []
is then stored in this first argument which I receive in each loop (arr). So array -
this arr argument is always updated root array, which I want to return in the end.
So I'll simply arr.concat(el) something to that concat el. This will simply take
the given element for which I looping and add it to this array. Now I'm getting an
empty Array [] in console and if I reintroduce an ingredient e.g. cheese: 2, I get
an array (2) [{...}, {...}] with 2 Objects with type="cheese". This is how I can
flatten the array.
CHECK OUT THE DOCUMENTATION ON THESE DEFAULT JS ARRAY FUNCTIONS: .map() and .reduce()
With that I got an array which is either empty or gets jsx elements and since it might
be empty I can simpy check if transformedIngredients.length === 0 then I want to
output a <p>Please start adding ingredients!</p>
I will therefore convert const transformedIngredients to let transformedIngredients.
and inside of if statement I'll set transformedIngredients= <p>please...</p>. I still
output {transformedIngredients} down inside of the <div className={classes.Burger}>.
    .reduce((arr, el) => {
      return arr.concat(el);
    }, []);

    if (transformedIngredients.length === 0 ) {
      transformedIngredients = <p>Please start adding ingredients!</p>
    }
After I update the BurgerBuilder to cheese: 0, I see this message on start adding ings.
In the next step I'll start adding controls to let the user to add or remove the
ingredients.

----------------------------
122. Adding the Build Control Component
Now I'd like to add some controls so the user can control which ingredients he
the burger should have.
In the Burger folder I'll addd a BuildControls subfolder and BuildControls.js file.
Build controls will be a functional component - it's a function, which receives
(props) and which will return some jsx. Import eract, export default.
I create a <div> which I use to give this area some styling, and inside of this
div I want to have various build controls. For styling that area I'll create
BuildControls.css in the same subfolder. It makes sence to outsource the builder
controls, it's not just 1 button - it's a label and 2 buttons and it's basically
a reusable UI element, so putting it in its own component makes a lot of sence.
Inside BuildControls subfolder I'll ad the BuildControl subfolder with BuildControl.js
and BuildControl.css files.
BuildControl сomponent will also be a function, will receive props and return some
jsx. import react and export default buildControl. For styling I'll use <div> as
a wrapper and inside of it 2 <button>s for MORE and LESS controls. Also I want to
output label dynamically and I set {props.label} inside of the div. I'll receive a
prop for this and I'll name it label. I import the classes object from my css file.
and attach a className to the wrapping and label divs. The next step is create an
array of such build controls in the BuildControls component.

----------------------------
159. Outputting Multiple Build Controls
To output build controls I create a constant, not a state, not a property, just
another constant in BuildControls file, which I name controls. I want to have an
Array through which I can loop to conviniantly build this controls and render them.
Inside of an array I want to have a couple of JS objects, each of them should
have { label: ..., type: ... }, e.g. { label: 'Salad', type: 'salad' },. The types
btw should meet the types I'm checking for in the BurgerIngredient component in the
switch statement, with the same casing. Now I have an array of controls, which I can
use in my buildControls component. To use BuildControls.css class I have to
import it and assign className to the wrapping <div>. Inside of a <div> i want to
loop through all the controls and render a buildControl for each of them. Firs I
have to import BuildControl from BuildControl folder. Then inide of tthe BuildControls
wrapping <div> I create a loop with the curly braces {} to inline it. Take controls
constant, which is a part of this file and which I can access here, call .map() and
map each control (ctrl) - each element of an array into a BuildControl - a self
closing tag, where I set a key (that's required), the key can be a label, cas it's
a unique identifier and then also pass label to this BuildControl component.
    <div className={classes.BuildControls}>
      {controls.map(ctrl => (
        <BuildControl key={ctrl.label} label={ctrl.label}/>
      ))}
    </div>
The type will become important later. After I export BuildControls in the
BurgerBuilder.js I can isert it instead of the placeholder in <Aux>. I have to
import BuildControls and simply output it instead of the placeholder div as
<BuildControls />. Now after saving I should see build controls below the burger.
They are doing nothing yet.

----------------------------
160. Connecting State to Build Controls
I'd like to tie up the <BuildControls /> with our real ingredients, so the user can really
manage the burger on his own. For that I'll create a couple of methods in the BurgerBuilder to
update the ingredients - to add or remove them.  In the BurgerBuilder below the state I'll add
2 methods: the addIngredientHandler and removeIngredientHandler. addIngredientHandler will receive
a type of the ingredient. for which I want to add one. removeIngredientHandler also needs to know for 
which type I want to remove the ingredient. To add ingredient I first want to know what old 
ingredient count is, so I'll add the const oldCount and access this.state.ingredients[type] for the 
given type. Then I'll calculate the updated count const updatedCount which equals the oldCount + 1;
Now I need to update my ingredients. I'll create a new const updatedIngredients, because as we learned,
state should be updated in the inmutable way. So I'll create a new JS object, and use the ES6 spread 
operator {...this.state.ingredients} to distribute the properties of the old ingredients state into the new object,
I'm creating here. Then I'm taking my updatedIngredients object, access the type, for which I have to update the
ingredients and set the count - the value, where amount of ingredients = to updatedCount.
Now I can call this set state to to update my ingredients in my state. 
addIngredientHandler = (type) => {
    const oldCount = this.state.ingredients[type];
    const updatedCount = oldCount + 1; 
    const updatedIngredients = {
      ...this.state.ingredients 
    };
    updatedIngredients[type] = updatedCount;
  }
I also want to want to start keeping track of the price though. So I'll add the total price property
to my ingredients and let's say the base price for the burger is 4$. totalPrice: 4; 
Here `updatedIngredients[type] = updatedCount` I want to update this price, so I need to have a mapping of
which ingredient costs what. For that I'll create a new constant outside of the class, but in the same file,
which I name const INGREDIENT_PRICES = {
  salad: 0.5,
  ...
}
Global constant are typically named in all capital characters. INGREDIENT_PRICES is a JS object, where are the 
prices for ingredients (e.g salad: 0.5). Now I want to update the total price with the price for the type, we added. 
So priceAddition basically is INGREDIENT_PRICES for a given type. Because, keep in mind we're also using the same types,
we're using everywhere else in the app: salad, cheese, meat, bacon, with the same casing and so on. So for that type I can
fetch the price, and since I'm always adding one unit as a time I don't need to multiply this with anything. So I can now take 
my const oldPrice from this.state.totalPrice; and set the const newPrice equal to oldPrice + priceAddition, with that I can now 
call this.setState({totalPrice: newPrice, ingredients: updatedIngredients }), and there set totalPrice to the newPrice
and I can set ingredients equal to updatedIngredients. So this is now a state update I want to do  when the new ingredient has added. 
Update the ingredients and update the price.
addIngredientHandler = (type) => {
    const oldCount = this.state.ingredients[type];
    const updatedCount = oldCount + 1; 
    const updatedIngredients = {
      ...this.state.ingredients 
    };
    updatedIngredients[type] = updatedCount;
    const priceAddition = INGREDIENT_PRICES[type];
    const oldPrice = this.state.totalPrice;
    const newPrice = oldPrice + priceAddition;
    this.setState({totalPrice: newPrice, ingredients: updatedIngredients});
  }
  With that let's hook that addIngredientHandler up to the "More" button in our <BuildControls />. To do that I need to pass the 
  property to the <BuildControls />. There I'll simply add ingredientAdded property, which holds the reference to this addIngredientHandler.
   <BuildControls
          ingredientAdded={this.addIngredientHandler} />
  Now inside of the <BuildControls /> I need to distribute ingredientAdded correctly, so I'll go to the BuildControls.js component, 
  where I need to pass ingredientAdded to the individual <BuildControl /> I have. We not only have the key and the label, but I also
  have the "More" button in there. So when "added" or "more" (I can name this props anything I want) clicked, then I want to pass on the
  props.ingredientAdded, so the property we do recieve in the buildControl is the property I set up in the BuildControls. 
  <BuildControl
        key={ctrl.label}
        label={ctrl.label}
        added={props.ingredientAdded(ctrl.type)
  />
  Now with that in BuildControls I pass it on to the individual BuildControl, so that this BuildControl can call that.
  However, I also need to of course keep track of which type this BuildControl is of, so which type this BuildControl has. 
  I do have this type property in the controls array, which we use to create all this controls, so I should also pass the 
  type to my ingredient: type={ctrl.type} <- of course I could do that, but essentially that's unnecessary extra loop.
  I would now implement the click listener to the BuildControl, to just return everything back up. So I can just remove 
  type={ctrl.type} and instead set up ES6 function to added:  added={ () => props.ingredientAdded(ctrl.type)} />, execute
  props.ingredientAdded, so the function reference will receive in buildControls,  and there simply pass back ctrl.type. 
  Remember I have access to control type here, cause inside that map loop I'm looping through all the controls, and each control has 
  a type. 
  const buildControls = (props) => (
  <div className={classes.BuildControls}>
    {controls.map(ctrl => (
      <BuildControl
        key={ctrl.label}
        label={ctrl.label}
        added={ () => props.ingredientAdded(ctrl.type)} />
    ))}
  </div>
);
This leads to addIngredientHandler being executed, and there I expect to get a type as an argument, which is why I'm passing 
(ctrl. type) here added={ () => props.ingredientAdded(ctrl.type)} /> in buildControls. 
Of course for this to work, the 'added' property, which we're passing to a single BuildControl needs to be connected to the "More" 
button in the BuildControl.js. So on that buttobn I'll add the onClick listener, and there I access props.added, which should in the end trigger this 
method:  added={ () => props.ingredientAdded(ctrl.type)} />.  
const buildControl = ( props ) => (
  <div className={classes.BuildControl}>
    <div className={classes.Label}>{props.label}</div>
    <button className={classes.Less}>Less</button>
    <button className={classes.More} onClick={props.added}>More</button>
  </div>
);
Now after I save and go to the burger, I'm able to add the ingredients using the More button. 


